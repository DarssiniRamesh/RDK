diff --git a/HdmiInput/HdmiInput.cpp b/HdmiInput/HdmiInput.cpp
index 0b4061b9..8a5e5af2 100644
--- a/HdmiInput/HdmiInput.cpp
+++ b/HdmiInput/HdmiInput.cpp
@@ -69,7 +69,10 @@
 
 static int audio_output_delay = 100;
 static int video_latency = 20;
-static bool lowLatencyMode = 1;
+#define TVMGR_GAME_MODE_EVENT "gameModeEvent"
+static bool m_subscribed = false;
+static bool lowLatencyMode = false;
+#define SERVER_DETAILS  "127.0.0.1:9998"
 
 using namespace std;
 
@@ -138,10 +141,37 @@ namespace WPEFramework
 	    
 	    HdmiInput::_instance = this;
 	    InitializeIARM();
-
+	    subscribeForTvMgrEvent("gameModeEvent");
 	    return (string());
 	}
 
+ 	uint32_t HdmiInput::subscribeForTvMgrEvent(const char* eventName)
+        {
+            uint32_t err = Core::ERROR_NONE;
+            LOGINFO("Attempting to subscribe for event: %s\n", eventName);
+            Core::SystemInfo::SetEnvironment(_T("THUNDER_ACCESS"), (_T(SERVER_DETAILS)));
+            if (nullptr == m_client) {
+                getControlSettingsPlugin();
+                if (nullptr == m_client) {
+                    LOGERR("JSONRPC: %s: client initialization failed", TVSETTINGS_CALLSIGN_VER);
+                    err = Core::ERROR_UNAVAILABLE;
+                }
+            }
+
+                       if(err == Core::ERROR_NONE) {
+                /* Register handlers for Event reception. */
+                if(strcmp(eventName, TVMGR_GAME_MODE_EVENT) == 0) {
+                    err =m_client->Subscribe<JsonObject>(1000, eventName
+                            , &HdmiInput::onGameModeEventHandler, this);
+                   m_subscribed = true;
+                                       }
+                                       else {
+                    LOGERR("Failed to subscribe for %s with code %d", eventName, err);
+                                       }
+                       }
+                       return err;
+       }
+
         void setResponseArray(JsonObject& response, const char* key, const vector<string>& items)
         {
             JsonArray arr;
@@ -176,7 +206,6 @@ namespace WPEFramework
 		IARM_CHECK( IARM_Bus_RegisterEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_HDMI_IN_ALLM_STATUS, dsHdmiGameFeatureStatusEventHandler) );
                 IARM_CHECK( IARM_Bus_RegisterEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_HDMI_IN_AVI_CONTENT_TYPE, dsHdmiAviContentTypeEventHandler) );
 		IARM_CHECK( IARM_Bus_RegisterEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_HDMI_IN_AV_LATENCY, dsHdmiAVLatencyEventHandler) );
-		IARM_CHECK( IARM_Bus_RegisterEventHandler(IARM_BUS_TVMGR_NAME,IARM_BUS_TVMGR_EVENT_TV_LOW_LATENCY_MODE, tvLowLatencyModeEventHandler) );
 	    }
         }
 
@@ -192,7 +221,6 @@ namespace WPEFramework
 		IARM_CHECK( IARM_Bus_RemoveEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_HDMI_IN_ALLM_STATUS, dsHdmiGameFeatureStatusEventHandler) );
                 IARM_CHECK( IARM_Bus_RemoveEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_HDMI_IN_AVI_CONTENT_TYPE,dsHdmiAviContentTypeEventHandler) );
 	        IARM_CHECK( IARM_Bus_RemoveEventHandler(IARM_BUS_DSMGR_NAME,IARM_BUS_DSMGR_EVENT_HDMI_IN_AV_LATENCY,dsHdmiAVLatencyEventHandler) );
-	    	IARM_CHECK( IARM_Bus_RemoveEventHandler(IARM_BUS_TVMGR_NAME,IARM_BUS_TVMGR_EVENT_TV_LOW_LATENCY_MODE,tvLowLatencyModeEventHandler) );
 	    }
         }
 
@@ -707,26 +735,15 @@ namespace WPEFramework
 	  	HdmiInput::_instance->reportLatencyInfoToHdmiCecSink();
             }
         }
-
-	void  HdmiInput::tvLowLatencyModeEventHandler(const char *owner, IARM_EventId_t eventId, void *data, size_t len)
-        {
-            LOGINFO("Entered in tvLowLatencyModeEventHandler\n");
-           if(!HdmiInput::_instance)
-                return;
-
-            if (IARM_BUS_TVMGR_EVENT_TV_LOW_LATENCY_MODE == eventId)
-            {
-
-               IARM_Bus_TVMgr_EventData_t *eventData = (IARM_Bus_TVMgr_EventData_t *)data;
-                lowLatencyMode = eventData->data.mode.low_latency_mode;
-                LOGINFO("LowLatency change with value: %d\n",lowLatencyMode);
-
-	  	LOGINFO("Latency Info Change occurs : LowLatencyValues -- Report to HdmiCecSink\n");
-	  	HdmiInput::_instance->reportLatencyInfoToHdmiCecSink();
-	      // HdmiInput::_instance->tvLowLatencyChange(lowLatencyMode);
-            }
-        }
-        void HdmiInput::dsHdmiEventHandler(const char *owner, IARM_EventId_t eventId, void *data, size_t len)
+        
+	    void  HdmiInput::onGameModeEventHandler(const JsonObject& parameters)
+    	   {	
+		LOGINFO("Entered in onGameModeEventHandler\n");
+        	lowLatencyMode = parameters["lowLatencyMode"].Boolean();
+        	 HdmiInput::_instance->reportLatencyInfoToHdmiCecSink();
+    	   }	
+	
+	void HdmiInput::dsHdmiEventHandler(const char *owner, IARM_EventId_t eventId, void *data, size_t len)
         {
             if(!HdmiInput::_instance)
                 return;
diff --git a/HdmiInput/HdmiInput.h b/HdmiInput/HdmiInput.h
index 99a2ec6d..0615f482 100644
--- a/HdmiInput/HdmiInput.h
+++ b/HdmiInput/HdmiInput.h
@@ -111,6 +111,7 @@ namespace WPEFramework {
             static void dsHdmiAVLatencyEventHandler(const char *owner, IARM_EventId_t eventId, void *data, size_t len);
 
 	    void reportLatencyInfoToHdmiCecSink();
+	     void onGameModeEventHandler(const JsonObject& parameters);
 	public:
             HdmiInput();
             virtual ~HdmiInput();
