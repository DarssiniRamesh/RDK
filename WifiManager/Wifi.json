{
    "$schema": "https://raw.githubusercontent.com/rdkcentral/Thunder/master/Tools/JsonGenerator/schemas/interface.schema.json",
    "jsonrpc": "2.0",
    "info": {
        "title": "Wifi API", 
        "class": "WifiManager",
        "description": "The `Wifi` plugin is used to manage Wifi network connections on a set-top device."
    },
    "definitions": {
        "result_int":{
            "summary": "The result of the operation",
            "enum":[
                0,
                1
            ],
            "type": "integer",
            "example": 0
        },
        "ssid":{
            "summary": "The paired SSID",
            "type": "string",
            "example": "123412341234"
        },
        "bssid":{
            "summary": "The paired BSSID",
            "type": "string",
            "example": "ff:ff:ff:ff:ff:ff"
        },
        "state": {
            "summary": "The Wifi operational state",
            "type": "integer",
            "example": 2
        },
        "passphrase": {
            "summary": "The access point password",
            "type": "string",
            "example": "password"
        },
        "securityMode": {
            "summary": "The security mode. See `getSupportedSecurityModes`.",
            "type": "integer",
            "example": 2
        },
        "signalStrength":{
            "summary": "The RSSI value in dBm",
            "type": "string",
            "example": "-27.000000"
        },
        "frequency":{
            "summary": "The supported frequency for this SSID in GHz",
            "type": "string",
            "example": "2.442000"
        },
        "result": {
            "type":"object",
            "properties": {
                "success": {
                    "$ref": "#/definitions/success"
                }
            },
            "required": [
                "success"
            ]
        },
        "success": {
            "summary": "Whether the request succeeded",
            "type": "boolean",
            "example": "true"
        },
        "errors": {
            "summary": "Error string of scan failure",
            "type": "string",
            "example": ""
        },
        "empty_string": {
            "summary": "Not supported",
            "type": "string",
            "example": ""
        }
    },
    "methods": {
        "cancelWPSPairing":{
            "summary": "Cancels the in-progress WPS pairing operation. The operation forcefully stops the in-progress paring attempt and aborts the current scan. WPS pairing must be in-progress for the operation to get succeed.\n  \n### Events\n \n#### onError\n \n| Event | Description | \n| :-------- | :-------- | \n| `ErrorCode: NO_SSID` | WPS pairing gets successfully cancelled. A new WPS can be initiated |",
            "events": [
                "onError"
            ],
            "result": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/empty_string"
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "result",
                    "success"
                ]
            }
        },
        "clearSSID":{
            "summary": "Clears the saved SSID. Triggers `onWiFiStateChanged` event.\n \n### Events\n \nonWIFIStateChanged\n \n| Event | Description | \n| :-------- | :-------- | \n| `WifiState`: `DISCONNECTED` | After you clear the saved SSID, the WiFi gets disconnected |",
            "events": [
                "onWIFIStateChanged"
            ],
            "result": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/result_int"
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "result",
                    "success"
                ]
            }
        },
        "connect":{
            "summary": "Attempts to connect to the specified SSID with the given passphrase. Passphrase can be null when the network security is `NONE`. This method attempts to connect to the saved SSID and password, when called with no arguments.\n \n### Events \n \n#### onWiFiStateChanged\n \n| Event | Description | \n| :-------- | :-------- | \n| `WifiState`: `DISCONNECTED` | When connected to any SSID, the device first switches to disconnected state | \n| `WifiState`: `CONNECTING` | The WiFi is connecting with the requested SSID and Passphrase | \n| `WifiState`: `CONNECTED` | The WiFi is successfully connected to the device | \n| `WifiState`: `FAILED` | If the device has encountered with any recoverable or unexpected WiFi error occurs | \n \n#### onError\n \n| Event | Description |  \n| :-------- | :-------- |  \n| `ErrorCode`: `SSID_CHANGED` | This error occurs, when the same SID gets changed | \n| `ErrorCode`: `CONNECTION_FAILED` | This error occurs, when the network connection is failed for an unknown technical reason | \n| `ErrorCode`: `INVALID_CREDENTIALS` | This error occurs, when the networkconnection gets failed due to invalid network credentials | \n| `ErrorCode`: `NO_SSID` | This error occurs, when the requested SSID does not exist |",
            "events": [
                "onWiFiStateChanged",
                "onError"
            ],
            "params": {
                "type": "object",
                "properties": {
                    "ssid": {
                        "$ref": "#/definitions/ssid"
                    },
                    "passphrase": {
                        "$ref": "#/definitions/passphrase"
                    },
                    "securityMode": {
                        "$ref": "#/definitions/securityMode"
                    }
                },
                "required": [
                    "ssid",
                    "passphrase",
                    "securityMode"
                ]
            },
            "result": {
                "$ref": "#/definitions/result"
            }
        },
        "disconnect":{
            "summary": "Disconnects from the connected SSID. The `onWiFiStateChanged` event triggers on WiFi state changes.\n \n### Events\n \n#### onWIFIStateChanged\n \n| Event | Description |  \n| :-------- | :-------- |  \n| `WifiState`: `DISCONNECTED` | The WiFi gets disconnect when the device is connected to any of the SSID.|\n| `WifiState`: `FAILED` | If the device has encountered with any recoverable or unexpected WiFi errors |",
            "events": [
                "onWiFiStateChanged"
            ],
            "result": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/empty_string"
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "result",
                    "success"
                ]
            }
        },
        "getConnectedSSID":{
            "summary": "Returns the connected SSID information such as SSID, BSSID, rate, noise, security, signal strength and frequency of the connected WiFi network.\n \n### Events\n \nNo Events",
            "result": {
                "type": "object",
                "properties": {
                    "ssid": {
                        "$ref": "#/definitions/ssid"
                    },
                    "bssid": {
                        "$ref": "#/definitions/bssid"
                    },
                    "rate":{
                        "summary": "The physical data rate in Mbps",
                        "type": "string",
                        "example": "144.000000"
                    },
                    "noise":{
                        "summary": "The average noise strength in dBm",
                        "type": "string",
                        "example": "-121.000000"
                    },
                    "security":{
                        "summary": "The security mode. See the `connect` method",
                        "type": "string",
                        "example": "5"
                    },
                    "signalStrength": {
                        "$ref": "#/definitions/signalStrength"
                    },
                    "frequency": {
                        "$ref": "#/definitions/frequency"
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "ssid",
                    "bssid",
                    "rate",
                    "noise",
                    "security",
                    "signalStrength",
                    "frequency",
                    "success"
                ]
            }
        },
        "getCurrentState": {
            "summary": "Returns the current WiFi States. The possible WiFi states are as follows.\n \n### WiFi States\n  \n`0`: UNINSTALLED - The device was installed and uninstalled; or it does not have a Wifi radio installed\n \n`1`: DISABLED - The device is installed but not yet enabled\n \n`2`: DISCONNECTED - The device is installed and enabled, but not yet connected to a network\n \n`3`: PAIRING - The device is in process of pairing, but not yet connected to a network\n \n`4`: CONNECTING - The device is attempting to connect to a network\n \n`5`: CONNECTED - The device is successfully connected to a network\n \n`6`: FAILED - The device has encountered an unrecoverable error with the WiFi adapter\n \n### Events\n \nNo Events",
            "result": {
                "type": "object",
                "properties": {
                    "state": {
                        "$ref": "#/definitions/state"
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "state",
                    "success"
                ]
            }
            
        },
        "getPairedSSID":{
            "summary": "Returns the SSID to which the device is currently paired.\n \n### Events\n \nNo Events",
            "result": {
                "type": "object",
                "properties": {
                    "ssid": {
                        "$ref": "#/definitions/ssid"
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "ssid",
                    "success"
                ]
            }
        },
        "getPairedSSIDInfo":{
            "summary": "Returns the SSID and BSSID to which the device is currently paired. The BSSID is the MAC address of a connected WiFi network.\n \n### Events\n \nNo Events",
            "result": {
                "type": "object",
                "properties": {
                    "ssid": {
                        "$ref": "#/definitions/ssid"
                    },
                    "bssid": {
                        "$ref": "#/definitions/bssid"
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "ssid",
                    "bssid",
                    "success"
                ]
            }
        },
        "getSupportedSecurityModes":{
            "summary": "Returns the WiFi security modes that the device supports.\n  \n### Events\n \nNo Events",
            "result": {
                "type": "object",
                "properties": {
                    "security_modes": {
                        "summary": "The supported security modes and its associated integer value.",
                        "type": "object",
                        "properties": {
                            "NET_WIFI_SECURITY_NONE": {
                                "type": "integer",
                                "example": 0 
                            },
                            "NET_WIFI_SECURITY_WEP_64": {
                                "type": "integer",
                                "example": 1
                            },
                            "NET_WIFI_SECURITY_WEP_128": {
                                "type": "integer",
                                "example": 2
                            },
                            "NET_WIFI_SECURITY_WPA_PSK_TKIP": {
                                "type": "integer",
                                "example": 3
                            },
                            "NET_WIFI_SECURITY_WPA_PSK_AES": {
                                "type": "integer",
                                "example": 4
                            },
                            "NET_WIFI_SECURITY_WPA2_PSK_TKIP": {
                                "type": "integer",
                                "example": 5
                            },
                            "NET_WIFI_SECURITY_WPA2_PSK_AES": {
                                "type": "integer",
                                "example": 6
                            },
                            "NET_WIFI_SECURITY_WPA_ENTERPRISE_TKIP": {
                                "type": "integer",
                                "example": 7
                            },
                            "NET_WIFI_SECURITY_WPA_ENTERPRISE_AES": {
                                "type": "integer",
                                "example": 8
                            },
                            "NET_WIFI_SECURITY_WPA2_ENTERPRISE_TKIP": {
                                "type": "integer",
                                "example": 9
                            },
                            "NET_WIFI_SECURITY_WPA2_ENTERPRISE_AES": {
                                "type": "integer",
                                "example": 10
                            },
                            "NET_WIFI_SECURITY_WPA_WPA2_PSK": {
                                "type": "integer",
                                "example": 11
                            },
                            "NET_WIFI_SECURITY_WPA_WPA2_ENTERPRISE": {
                                "type": "integer",
                                "example": 12
                            },
                            "NET_WIFI_SECURITY_WPA3_PSK_AES": {
                                "type": "integer",
                                "example": 13
                            },
                            "NET_WIFI_SECURITY_WPA3_SAE": {
                                "type": "integer",
                                "example": 14
                            }
                        }
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "security_modes",
                    "success"
                ]
            }
        },
        "initiateWPSPairing":{
            "summary": "Initiates a connection using WiFi Protected Setup (WPS). An existing connection is disconnected before attempting to initiate a new connection. If the existing connection cannot be disconnected after 60 seconds, then the WPS pairing will stop, and an error event triggers. This method sends both `onWifiStateChanged` and `onError` events.\n \n### Events\n \n#### onWifiStateChanged\n \n| Event | Description | \n| :-------- | :-------- |  \n| `WifiState`: `CONNECTING` | Indicates that a WPS key code has been received from the access point. The device is in the process of connecting to the network | \n| `WifiState`: `CONNECTED` | Indicates that WPS pairing succeeded, and the device is connected to the access point | \n| `WifiState`: `FAILED` | Indicates that the connection attempt failed and should be attempted again. Failures includes a connection is already in progress; the WPA supplicant configuration file could not be opened or saved; the WPS key code was not received or an existing connection could not be disconnected |\n \n#### onError\n \n| Event | Description | \n| :-------- | :-------- | \n| `ErrorCode`: `CONNECTION_FAILED` | Indicates a failure to connect to the access point | \n| `ErrorCode`: `NO_SSID` | Indicates that the connection timeout threshold of 120 seconds was reached or that a WPS overlap was detected |",
            "events": [
                "onWifiStateChanged",
                "onError"
            ],
            "result": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/empty_string"
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "result",
                    "success"
                ]
            }
        },
        "isPaired":{
            "summary": "Determines whether the device is paired to a specified SSID or not.\n \n### Events\n \nNo Events",
            "result": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/result_int"
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "result",
                    "success"
                ]
            }
        },
        "isSignalThresholdChangeEnabled":{
            "summary": "Checks whether `onWifiSignalThresholdChanged` event is enabled or not.\n \n### Events\n \nNo Events",
            "result": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/result_int"
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "result",
                    "success"
                ]
            }
        },
        "saveSSID":{
            "summary": "Saves the SSID, passphrase, and security mode of the WiFi network for future sessions. If the SSID was previously saved then, the new SSID and passphrase will overwrite the existing values.\n \n### Events\n \nNo Events",
            "params": {
                "type": "object",
                "properties": {
                    "ssid": {
                        "$ref": "#/definitions/ssid"
                    },
                    "passphrase": {
                        "$ref": "#/definitions/passphrase"
                    },
                    "securityMode": {
                        "$ref": "#/definitions/securityMode"
                    }
                },
                "required": [
                    "ssid",
                    "passphrase",
                    "securityMode"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "result": {
                        "$ref": "#/definitions/result_int"
                    },
                    "success":{
                        "$ref": "#/definitions/success"
                    }
                },
                "required": [
                    "result",
                    "success"
                ]
            }
        },
        "setEnabled":{
            "summary": "Enables or disables the WiFi adapter for this device.\n \n### Events\n \nNo Events",
            "params": {
                "type": "object",
                "properties": {
                    "enable": {
                        "summary": "`true` to enable, or `false` to disable",
                        "type": "boolean",
                        "example": true
                    }
                },
                "required": [
                    "enable"
                ]
            },
            "result": {
                "$ref": "#/definitions/result"
            }
        },
        "setSignalThresholdChangeEnabled":{
            "summary": "Sets the `time interval` to check the WiFi signal strength in a given time interval. The `onWifiSignalThresholdChanged` event is triggered when the `setSignalThresholdChangedEnabled` method sets the `enabled` parameter value as `true`.\n \n### Events\n \n| Event | Description | \n| :-------- | :-------- | \n| `onWifiSignalThresholdChanged` | This event gets triggered recursively in the specified value in interval param of  `setSignalThresholdChangeEnabled` method |",
            "events":[
                "onWifiSignalThresholdChanged"
            ],
            "params": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "summary": "`true` to enable the `onWifiSignalThresholdChanged` event or `false` to disable the `onWifiSignalThresholdChanged` event",
                        "type": "boolean",
                        "example": true
                    },
                    "interval": {
                        "summary": "It is the time interval value in milliseconds, to determine if the network strength crossed a threshold value for the given time interval",
                        "type": "integer",
                        "example": 2000
                    }
                },
                "required": [
                    "enabled",
                    "interval"
                ]
            },
            "result": {
                "$ref": "#/definitions/result"
            }
        },
        "startScan":{
            "summary": "Scans for available SSIDs. Available SSIDs are returned in an `onAvailableSSIDs` event.\n \n### Events\n \n| Event | Description | \n| :-------- | :-------- | \n| `onAvailableSSIDs` | Triggered when the `startScan method` is called and SSIDs are obtained. If the scan method is called with the incremental property set to `true`, then `moreData` is `false` when the last set of results are received. If the incremental property in `startScan` method is set to `false`, then the event returns with `moreData` is `false` after a single event |",
            "events": [
                "onAvailableSSIDs"
            ],
            "params": {
                "type": "object",
                "properties": {
                    "incremental": {
                        "summary": "If set to `true`, SSIDs are returned in multiple events as the SSIDs are discovered. This may allow the UI to populate faster on screen rather than waiting on the full set of results in one shot.",
                        "type": "boolean",
                        "example": false
                    },
                    "ssid": {
                        "summary": "The SSIDs to scan. An empty or `null` value scans for all SSIDs. If an SSID is specified, then the results are only returned for matching SSID names. SSIDs may be entered as a string literal or regular expression.",
                        "type": "string",
                        "example": ""
                    },
                    "frequency": {
                        "summary": "The frequency to scan. An empty or `null` value scans all frequencies. If a frequency is specified (2.4 or 5.0), then the results are only returned for matching frequencies.",
                        "type": "string",
                        "example": ""
                    }
                },
                "required": [
                    "incremental",
                    "ssid",
                    "frequency"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "success": {
                        "$ref": "#/definitions/success"
                    },
                    "error": {
                        "$ref": "#/definitions/errors"
                    }
                },
                "required": [
                    "success",
                    "error"
                ]
            }
        },
        "stopScan":{
            "summary": "Stops scanning for SSIDs. From the `startScan` method up to the point where this method is called, all discovered SSIDs are still returned.\n \n### Events\n \nNo Events",
            "result": {
                "$ref": "#/definitions/result"
            }
        }
    },
    "events": {
        "onWIFIStateChanged":{
            "summary": "Triggered when the WiFi state changes. See `getCurrentState` for a list of valid WiFi states.",
            "params": {
                "type" :"object",
                "properties": {
                    "state": {
                        "$ref": "#/definitions/state"
                    },
                    "isLNF": {
                        "summary": "`true` if connected to a LNF SSID, otherwise `false`",
                        "type": "boolean",
                        "example": false
                    }
                },
                "required": [
                    "state",
                    "isLNF"
                ]
            }
        },
        "onError":{
            "summary": "Triggered when a recoverable unexpected WiFi error occurs.\n \n### Error Codes\n \n`0`: SSID_CHANGED - The SSID of the network changed\n \n`1`: CONNECTION_LOST - The connection to the network is lost\n \n`2`: CONNECTION_FAILED - The connection failed for an unknown reason\n \n`3`: CONNECTION_INTERRUPTED - The connection was interrupted\n \n`4`: INVALID_CREDENTIALS - The connection failed due to invalid credentials\n \n`5`: NO_SSID - The SSID does not exist\n \n`6`: UNKNOWN - Any other error",
            "params": {
                "type" :"object",
                "properties": {
                    "code": {
                        "summary": "The error code",
                        "type": "integer",
                        "example": 2
                    }
                },
                "required": [
                    "code"
                ]
            }
        },
        "onSSIDsChanged":{
            "summary": "Triggered when a new SSID becomes available or an existing SSID is no longer available."
        },
        "onWifiSignalThresholdChanged":{
            "summary": "Triggered at intervals specified in the `setSignalThresholdChangeEnabled` method in order to monitor changes in WiFi strength.",
            "params": {
                "type" :"object",
                "properties": {
                    "signalStrength": {
                        "$ref": "#/definitions/signalStrength"
                    },
                    "strength": {
                        "summary": "WiFi signal strength indicates as excellent, good, fair, and weak ",
                        "enum": [
                            "Excellent",
                            "Good",
                            "Fair",
                            "Weak"
                        ],
                        "type": "string",
                        "example": "Excellent"
                    }
                },
                "required": [
                    "signalStrength",
                    "strength"
                ]
            }
        },
        "onAvailableSSIDs":{
            "summary": "Triggered when the scan method is called and current SSIDs are obtained.",
            "params": {
                "type" :"object",
                "properties": {
                    "ssids": {
                        "summary": "A list of SSIDs and their information",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "ssid": {
                                    "$ref": "#/definitions/ssid"
                                },
                                "security":{
                                    "$ref": "#/definitions/securityMode"
                                },
                                "signalStrength": {
                                    "$ref": "#/definitions/signalStrength"
                                },
                                "frequency": {
                                    "$ref": "#/definitions/frequency"
                                }
                            },
                            "required": [
                                "ssid",
                                "security",
                                "signalStrength",
                                "frequency"
                            ]
                        }
                    },
                    "moreData": {
                        "summary": "If the scan method is called with the incremental property set to `true`, then `moreData` is `false` when the last set of results are received. If the incremental property is set to `false`, then `moreData` is `false` after a single event",
                        "type": "boolean",
                        "example": true
                    }
                },
                "required": [
                    "ssids",
                    "moreData"
                ]
            }
        }
    }
}
