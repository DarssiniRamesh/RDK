{
    "$schema": "https://raw.githubusercontent.com/rdkcentral/rdkservices/main/Tools/json_generator/schemas/interface.schema.json",
    "jsonrpc": "2.0",
    "info": {
        "title": "NetworkManager Plugin",
        "callsign": "org.rdk.NetworkManager",
        "class": "NetworkManager",
        "locator": "libWPENetworkManager.so",
        "status": "production",
        "description": "The `NetworkManager` plugin allows you to manage Ethernet and Wifi interfaces on the device",
        "version": "1.0.0"
    },
    "common": {
        "$ref": "../../common/common.json"
    },
    "definitions": {
        "interface": {
            "summary": "An interface, such as `eth0` or `wlan0`, depending upon availability of the given interface in `getInterfaces`",
            "type": "string",
            "example": "wlan0"
        },
        "ipversion": {
            "summary": "either IPv4 or IPv6",
            "type": "string",
            "example": "IPv4"
        },
        "autoconfig": {
            "summary": "`true` if DHCP is used, `false` if IP is configured manually",
            "type": "boolean",
            "example": true
        },
        "dhcpserver": {
            "summary": "The DHCP Server address",
            "type": "string",
            "example": "192.168.1.1"
        },
        "ipaddress": {
            "summary": "The IP address",
            "type": "string",
            "example": "192.168.1.101"
        },
        "prefix": {
            "summary": "The prefix number",
            "type": "integer",
            "example": 123
        },
        "v6LinkLocal": {
            "summary": "The v6LinkLocal",
            "type": "string",
            "example": "192.168.1.1"
        },
        "gateway": {
            "summary": "The gateway address",
            "type": "string",
            "example": "192.168.1.1"
        },
        "primarydns": {
            "summary": "The primary DNS address",
            "type": "string",
            "example": "192.168.1.1"
        },
        "secondarydns": {
            "summary": "The secondary DNS address",
            "type": "string",
            "example": "192.168.1.2"
        },
        "port":{
            "summary": "STUN server port",
            "type": "integer",
            "example": "3478"
        },
        "endPoint":{
            "summary": "STUN server endPoint",
            "type": "string",
            "example": "stun.l.google.com"
        },
        "endpoint":{
            "summary": "The host name or IP address",
            "type": "string",
            "example": "45.57.221.20"
        },
        "bindTimeout":{
            "summary": "STUN server bind timeout",
            "type": "integer",
            "example": "30"
        },
        "cacheTimeout":{
            "summary": "STUN server cache timeout",
            "type": "integer",
            "example": "0"
        },
        "state": {
            "summary": "Internet Connection state",
            "type": "integer",
            "example": 2
        },
        "guid": {
            "summary": "The globally unique identifier",
            "type": "string",
            "example": ""
        },
        "noOfRequest": {
            "summary": "The number of packets to send. Default is 15.",
            "type": "integer",
            "example": 10
        },
        "timeout":{
            "summary": "STUN server bind timeout",
            "type": "integer",
            "example": "30"
        },
        "ssid":{
            "summary": "The paired SSID",
            "type": "string",
            "example": "123412341234"
        },
        "bssid":{
            "summary": "The paired BSSID",
            "type": "string",
            "example": "ff:ff:ff:ff:ff:ff"
        },
        "state": {
            "summary": "The Wifi operational state",
            "type": "integer",
            "example": 2
        },
        "passphrase": {
            "summary": "The access point password",
            "type": "string",
            "example": "password"
        },
        "securityMode": {
            "summary": "The security mode. See `getSupportedSecurityModes`.",
            "type": "integer",
            "example": 2
        },
        "signalStrength":{
            "summary": "The RSSI value in dBm",
            "type": "string",
            "example": "-27.000000"
        },
        "frequency":{
            "summary": "The supported frequency for this SSID in GHz",
            "type": "string",
            "example": "2.442000"
        },
        "errors": {
            "summary": "Error string of scan failure",
            "type": "string",
            "example": ""
        },
        "empty_string": {
            "summary": "Not supported",
            "type": "string",
            "example": ""
        }
    },
    "methods": {
        "SetLogLevel":{
            "summary": "Set Log level for more information. The possible set log level are as follows. \n* `0`: FATAL  \n* `1`: ERROR  \n* `2`: WARNING  \n* `3`: INFO \n* `4`: VERBOSE \n* `5`: TRACE \n",
            "params": {
                "type": "object",
                "properties": {
                     "loglevel": {
                        "summary": "Set Log level to get more information",
                        "type": "integer",
                        "example":1
                    }
                },
                "required": [
                    "loglevel"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "GetAvailableInterfaces":{
            "summary": "Get Device supported list of available interface including their state.",
            "result": {
                "type": "object",
                "properties": {
                    "Interfaces": {
                        "summary": "An interface",
                        "type":"array",
                        "items": {
                            "type":"object",
                            "properties": {
                                "type":{
                                    "summary": "Type",
                                    "type": "string",
                                    "example": ""
                                },
                                "name":{
                                    "summary": "Name",
                                    "type": "string",
                                    "example": ""
                                },
                                "mac":{
                                    "summary": "Interface MAC address",
                                    "type": "string",
                                    "example": "AA:AA:AA:AA:AA:AA"
                                },
                                "isEnabled":{
                                    "summary": "Whether the interface is currently enabled",
                                    "type": "boolean",
                                    "example": true
                                },
                                "isConnected":{
                                    "summary": "Whether the interface is currently connected",
                                    "type": "boolean",
                                    "example": true
                                }
                            },
                            "required": [
                                "type",
                                "name",
                                "mac",
                                "isEnabled",
                                "isConnected"
                            ]
                        }
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "interfaces",
                    "success"
                ]
            }
        },
        "GetPrimaryInterface": {
            "summary": "Gets the Primary/default network interface. The active network interface is defined as the one that can make requests to the external network. Returns one of the supported interfaces as per `getInterfaces`, or an empty value which indicates that there is no default network interface.",
            "result": {
                "type": "object",
                "properties": {
                    "interface": {
                        "$ref": "#/definitions/interface"
                    }
                },
                "required": [
                    "interface"
                ]
            }
        },
        "SetPrimaryInterface":{
            "summary": "Sets the Primary/default interface. The call fails if the interface is not enabled.",
            "events":{
                "onActiveInterfaceChanged" : "Triggered when device’s default interface changed.",
                "onInterfaceStateChanged" : "Triggered when interface’s state changed",
                "onIPAddressChanged" : "Triggered when the device connects to router.",
                "onInternetStatusChanged" : "Triggered when each IP address is lost or acquired."
            },
            "params": {
                "type":"object",
                "properties": {
                    "interface": {
                        "$ref": "#/definitions/interface"
                    },
                    "persist":{
                        "summary": "Whether the default interface setting persists after reboot. When `true`, this interface is enabled as the default interface currently AND on the next reboot. When `false`, this interface is only the default during this session.",
                        "type": "boolean",
                        "example": true
                    }
                },
                "required": [
                    "interface",
                    "persist"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "GetIPSettings":{
            "summary": "Gets the IP setting for the given interface.",
            "params": {
                "type":"object",
                "properties": {
                    "interface": {
                        "$ref": "#/definitions/interface"
                    },
                    "ipversion": {
                        "$ref": "#/definitions/ipversion"
                    }
                },
                "required": [
                    "interface"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "interface": {
                        "$ref": "#/definitions/interface"
                    },
                    "ipversion": {
                        "$ref": "#/definitions/ipversion"
                    },
                    "autoconfig": {
                        "$ref": "#/definitions/autoconfig"
                    },
                    "dhcpserver": {
                        "$ref": "#/definitions/dhcpserver"
                    },
                    "ipaddress": {
                        "$ref": "#/definitions/ipaddress"
                    },
                    "prefix": {
                        "$ref": "#/definitions/prefix"
                    },
                    "gateway": {
                        "$ref": "#/definitions/gateway"
                    },
                    "v6LinkLocal": {
                        "$ref": "#/definitions/v6LinkLocal"
                    },
                    "primarydns": {
                        "$ref": "#/definitions/primarydns"
                    },
                    "secondarydns": {
                        "$ref": "#/definitions/secondarydns"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "interface",
                    "ipversion",
                    "autoconfig",
                    "ipaddress",
                    "prefix",
                    "v6LinkLocal",
                    "gateway",
                    "primarydns",
                    "secondarydns",
                    "success"  
                ]
            }
        },
        "SetIPSettings":{
            "summary": "Sets the IP settings.",
            "events":{
                "onInternetStatusChanged" : "Triggered when each IP address is lost or acquired."
            },
            "params": {
                "type":"object",
                "properties": {
                    "interface": {
                        "$ref": "#/definitions/interface"
                    },
                    "ipversion": {
                        "$ref": "#/definitions/ipversion"
                    },
                    "autoconfig": {
                        "$ref": "#/definitions/autoconfig"
                    },
                    "ipaddress": {
                        "$ref": "#/definitions/ipaddress"
                    },
                    "prefix": {
                        "$ref": "#/definitions/prefix"
                    },
                    "gateway": {
                        "$ref": "#/definitions/gateway"
                    },
                    "primarydns": {
                        "$ref": "#/definitions/primarydns"
                    },
                    "secondarydns": {
                        "$ref": "#/definitions/secondarydns"
                    }
                },
                "required": [
                    "interface",
                    "ipversion",
                    "autoconfig",
                    "ipaddress",
                    "prefix",
                    "gateway",
                    "primarydns",
                    "secondarydns"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"  
                ]
            }
        },
        "GetStunEndpoint": {
            "summary": "Get the Stun Endpoint used for getPublicIP.",
            "result": {
                "type": "object",
                "properties": {
                    "endPoint": {
                        "$ref": "#/definitions/endPoint"
                    },
                    "port": {
                        "$ref": "#/definitions/port"
                    },
                    "bindTimeout": {
                        "$ref": "#/definitions/bindTimeout"
                    },
                    "cacheTimeout": {
                        "$ref": "#/definitions/cacheTimeout"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "endPoint",
                    "port",
                    "bindTimeout",
                    "cacheTimeout",
                    "success"
                ]
            }
        },
        "SetStunEndPoint":{
            "summary": "Set the Stun Endpoint used for getPublicIP.",
            "params": {
                "type":"object",
                "properties": {
                    "endPoint": {
                        "$ref": "#/definitions/endPoint"
                    },
                    "port": {
                        "$ref": "#/definitions/port"
                    },
                    "bindTimeout": {
                        "$ref": "#/definitions/bindTimeout"
                    },
                    "cacheTimeout": {
                        "$ref": "#/definitions/cacheTimeout"
                    }
                },
                "required": [
                    "endPoint",
                    "port",
                    "bindTimeout",
                    "cacheTimeout"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "success": {
                        "$ref": "#/common/success"
                    }
               },
                "required": [
                    "public_ip",
                    "success"
                ]
            }
        },
        "GetConnectivityTestEndpoints":{
            "summary": "Get connectivity test endpoints. on success list out the connectivity test points connections.",
            "result": {
                "type":"object",
                "properties": {
                    "endpoints": {
                        "summary": "",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "http://clients3.google.com/generate_204"
                        }
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "endpoints",
                    "success"
                ]
            }
        },
        "SetConnectivityTestEndpoints":{
            "summary": "Define up to 5 endpoints for a connectivity test. Successful connections are verified with HTTP Status code 204 (No Content)",
            "params": {
                "type":"object",
                "properties": {
                    "endpoints": {
                        "summary": "A list of endpoints to test",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "http://clients3.google.com/generate_204"
                        }
                    }
                },
                "required": [
                    "endpoints"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "IsConnectedToInternet":{
            "summary": "Whether the device has internet connectivity. This API might take up to 2s to validate internet connectivity.",
            "params": {
                "type":"object",
                "properties": {
                    "ipversion": {
                        "$ref": "#/definitions/ipversion"
                    }
                }
            },
            "result": {
                "type": "object",
                "properties": {
                    "isConnectedToInternet": {
                        "summary": "`true` if internet connectivity is detected, otherwise `false`",
                        "type": "boolean",
                        "example": true
                    },
                    "internetState": {
                        "$ref": "#/definitions/state"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "isConnectedToInternet",
                    "internetState",
                    "success"
                ]
            }
        },
        "GetCaptivePortalURI":{
            "summary": "Gets the captive portal URI if connected to any captive portal network.",
            "result": {
                "type": "object",
                "properties": {
                     "uri": {
                        "summary": "Captive portal URI",
                        "type": "string",
                        "example": "http://10.0.0.1/captiveportal.jst"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "uri",
                    "success"
                ]
            }
        },
        "StartConnectivityMonitoring":{
            "summary": "Enable a continuous monitoring of internet connectivity with heart beat interval thats given.",
            "events":{
                 "onInternetStatusChanged" : "Triggered when internet connection state changed."
            },
            "params": {
                "type":"object",
                "properties": {
                    "interval": {
                        "summary": "Interval in sec.",
                        "type": "number",
                        "example": "30"
                    }
                },
                "required": [
                    "interval"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "StopConnectivityMonitoring":{
            "summary": "Stops the connectivity monitoring.",
            "result": {
                "type": "object",
                "properties": {
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
         "GetPublicIP":{
            "summary": "It allows either zero parameter or with only interface and ipversion parameter to determine WAN ip address.",
            "params": {
                "type":"object",
                "summary":"it allows empty parameter too",
                "properties": {
                    "ipversion": {
                        "$ref": "#/definitions/ipversion"
                    }
                },
                "required": [
                    "ipversion"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "publicIP":{
                        "summary": "Returns an public ip of the device",
                        "type":"string",
                        "example": "69.136.49.95"
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "publicIP",
                    "success"
                ]
            }
        },
        "Ping":{
            "summary": "Pings the specified endpoint with the specified number of packets.",
            "events":{
                "onPingResponse" : "Triggered when Ping request is success."
            },
            "params": {
                "type":"object",
                "properties": {
                    "endpoint":{
                        "$ref": "#/definitions/endpoint"
                    },
                    "ipversion": {
                        "$ref": "#/definitions/ipversion"
                    },
                    "noOfRequest": {
                        "$ref": "#/definitions/noOfRequest"
                    },
                    "timeout": {
                        "$ref": "#/definitions/timeout"
                    },
                    "guid": {
                        "$ref": "#/definitions/guid"
                    }
                },
                "required": [
                    "endpoint",
                    "ipversion",
                    "noOfRequest",
                    "timeout",
                    "guid"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "Trace":{
            "summary": "Traces the specified endpoint with the specified number of packets using `traceroute`.",
            "onTraceResponse":{
                "onPingResponse" : "Triggered when Trace request get success."
            },
            "params": {
                "type":"object",
                "properties": {
                    "endpoint":{
                        "$ref": "#/definitions/endpoint"                       
                    },
                    "ipversion": {
                        "$ref": "#/definitions/ipversion"
                    },
                    "noOfRequest": {
                        "$ref": "#/definitions/noOfRequest"
                    },
                    "guid": {
                        "$ref": "#/definitions/guid"
                    }
                },
                "required": [
                    "endpoint",
                    "ipversion",
                    "noOfRequest",
                    "guid"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "StartWiFiScan":{
            "summary": "Scans for available SSIDs. Available SSIDs are returned in an `onAvailableSSIDs` event.",
            "events": {
                "onAvailableSSIDs" : "Triggered when list of SSIDs is available after the scan completes."
            },
            "params": {
                "type": "object",
                "properties": {
                    "frequency": {
                        "summary": "The frequency to scan. An empty or `null` value scans all frequencies. If a frequency is specified (2.4 or 5.0), then the results are only returned for matching frequencies.",
                        "type": "string",
                        "example": ""
                    }
                },
                "required": [
                    "frequency"
                ]
            },
            "result": {
                  "type": "object",
                  "properties": {
                     "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "StopWiFiScan":{
            "summary": "Stops scanning for SSIDs. Any discovered SSIDs from the call to the `startScan` method up to the point where this method is called are still returned.",
            "result": {
                "$ref": "#/common/result"
            }
        },
        "GetKnownSSIDs":{
            "summary": "Saved SSIDs list",
            "result": {
                "type": "object",
                "properties": {
                    "ssids": {
                        "summary": "Known SSIDS",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "Comcast123"
                        }
                    },
                    "success": {
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "ssids",
                    "success"
                ]
            }
        },
        "AddToKnownSSIDs":{
            "summary": "Saves the SSID, passphrase, and security mode for future sessions.",
            "params": {
                "type": "object",
                "properties": {
                    "ssid": {
                        "$ref": "#/definitions/ssid"
                    },
                    "passphrase": {
                        "$ref": "#/definitions/passphrase"
                    },
                    "securityMode": {
                        "$ref": "#/definitions/securityMode"
                    }
                },
                "required": [
                    "ssid",
                    "passphrase",
                    "securityMode"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "RemoveKnownSSID":{
            "summary": "Remove given ssid from saved ssids",
            "params": {
                "type": "object",
                "properties": {
                    "ssid": {
                        "$ref": "#/definitions/ssid"
                    }
                },
                "required": [
                    "ssid"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "WiFiConnect":{
            "summary": "Attempts to connect to the specified SSID with the given passphrase. Passphrase can be `null` when the network security is `NONE`. When called with no arguments, this method attempts to connect to the saved SSID and password. See `saveSSID`.",
            "events":{
                "onWiFiStateChanged" : "Triggered when Wifi state changes to CONNECTING, CONNECTED ."
            },
            "params": {
                "type": "object",
                "properties": {
                    "ssid": {
                        "$ref": "#/definitions/ssid"
                    },
                    "passphrase": {
                        "$ref": "#/definitions/passphrase"
                    },
                    "securityMode": {
                        "$ref": "#/definitions/securityMode"
                    }
                },
                "required": [
                    "ssid",
                    "passphrase",
                    "securityMode"
                ]
            },
            "result": {
                "$ref": "#/common/result"
            }
        },
        "WiFiDisconnect":{
            "summary": "Disconnects from the SSID. A `result` value of `0` indicates that the SSID was disconnected. A nonzero value indicates that the SSID did not disconnect.",
            "events":{
                "onWIFIStateChanged" : "Triggered when Wifi state changes to DISCONNECTED (only if currently connected)."
            },
            "result": {
                "type": "object",
                "properties": {
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "GetConnectedSSID":{
            "summary": "Returns the connected SSID information.",
            "result": {
                "type": "object",
                "properties": {
                    "ssid": {
                        "$ref": "#/definitions/ssid"
                    },
                    "bssid": {
                        "$ref": "#/definitions/bssid"
                    },
                    "securityMode":{
                        "summary": "The security mode. See the `connect` method",
                        "type": "string",
                        "example": "5"
                    },
                    "signalStrength": {
                        "$ref": "#/definitions/signalStrength"
                    },
                    "frequency": {
                        "$ref": "#/definitions/frequency"
                    },
                    "rate":{
                        "summary": "The physical data rate in Mbps",
                        "type": "string",
                        "example": "144.000000"
                    },
                    "noise":{
                        "summary": "The average noise strength in dBm",
                        "type": "string",
                        "example": "-121.000000"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "ssid",
                    "bssid",
                    "rate",
                    "noise",
                    "securityMode",
                    "signalStrength",
                    "frequency",
                    "success"
                ]
            }
        },
        "StartWPS":{
            "summary": "Initiates a connection using Wifi Protected Setup (WPS). An existing connection will be disconnected before attempting to initiate a new connection. Failure in WPS pairing will trigger an error event.\n\nIf the `method` parameter is set to `SERIALIZED_PIN`, then RDK retrieves the serialized pin using the Manufacturer (MFR) API. If the `method` parameter is set to `PIN`, then RDK use the pin supplied as part of the request. If the `method` parameter is set to `PBC`, then RDK uses Push Button Configuration (PBC) to obtain the pin.",
            "events":{
                "onWIFIStateChanged" : "Triggered when Wifi state changes to DISCONNECTED (only if currently connected), CONNECTING, CONNECTED."
            },
            "params": {
                "type": "object",
                "properties": {
                    "method": {
                        "summary": "The method used to obtain the pin",
                        "type": "string",
                        "enum": [
                            "PBC",
                            "PIN",
                            "SERIALIZED_PIN"
                        ],
                        "example": "PIN"
                    },
                    "wps_pin": {
                        "summary": "A valid 8 digit WPS pin number. Use this parameter when the `method` parameter is set to `PIN`.",
                        "type": "string",
                        "example": "88888888"
                    }
                },
                "required": [
                    "method",
                    "wps_pin"
                ]
            },
            "result": {
                "type": "object",
                "properties": {
                    "pin": {
                        "summary": "The WPS pin value. Valid only when `method` is set to `PIN` or `SERIALIZED_PIN`.",
                        "type":"string",
                        "example": "88888888"
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "result",
                    "success"
                ]
            }
        },
        "StopWPS":{
            "summary": "Cancels the in-progress WPS pairing operation. The operation forcefully stops the in-progress pairing attempt and aborts the current scan. WPS pairing must be in-progress for the operation to succeed.",
            "events":{
                "onWIFIStateChanged" : "Triggered when Wifi state changes to DISCONNECTED."
            },
            "result": {
                "type": "object",
                "properties": {
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "success"
                ]
            }
        },
        "GetWiFiSignalStrength":{
            "summary": "Get WiFiSignalStrength of connected SSID.",
            "events":{
                "onWiFiSignalStrengthChanged" : "Triggered when Wifi signal strength switches between Excellent, Good, Fair, Weak."
            },
            "result": {
                "type": "object",
                "properties": {
                    "ssid": {
                        "$ref": "#/definitions/ssid"
                    },
                    "signalStrength": {
                        "$ref": "#/definitions/signalStrength"
                    },
                    "quality":{
                        "summary": "Signal strength Quality",
                        "type": "integer",
                        "example": 123
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "ssid",
                    "signalStrength",
                    "quality",
                    "success"
                ]
            }
        },
        "GetSupportedSecurityModes":{
            "summary": "Returns the Wifi security modes that the device supports.",
            "result": {
                "type": "object",
                "properties": {
                    "security_modes": {
                        "summary": "The supported security modes and its associated integer value.",
                        "type": "object",
                        "properties": {
                            "NET_WIFI_SECURITY_NONE": {
                                "type": "integer",
                                "example": 0 
                            },
                            "NET_WIFI_SECURITY_WEP_64": {
                                "type": "integer",
                                "example": 1
                            },
                            "NET_WIFI_SECURITY_WEP_128": {
                                "type": "integer",
                                "example": 2
                            },
                            "NET_WIFI_SECURITY_WPA_PSK_TKIP": {
                                "type": "integer",
                                "example": 3
                            },
                            "NET_WIFI_SECURITY_WPA_PSK_AES": {
                                "type": "integer",
                                "example": 4
                            },
                            "NET_WIFI_SECURITY_WPA2_PSK_TKIP": {
                                "type": "integer",
                                "example": 5
                            },
                            "NET_WIFI_SECURITY_WPA2_PSK_AES": {
                                "type": "integer",
                                "example": 6
                            },
                            "NET_WIFI_SECURITY_WPA_ENTERPRISE_TKIP": {
                                "type": "integer",
                                "example": 7
                            },
                            "NET_WIFI_SECURITY_WPA_ENTERPRISE_AES": {
                                "type": "integer",
                                "example": 8
                            },
                            "NET_WIFI_SECURITY_WPA2_ENTERPRISE_TKIP": {
                                "type": "integer",
                                "example": 9
                            },
                            "NET_WIFI_SECURITY_WPA2_ENTERPRISE_AES": {
                                "type": "integer",
                                "example": 10
                            },
                            "NET_WIFI_SECURITY_WPA_WPA2_PSK": {
                                "type": "integer",
                                "example": 11
                            },
                            "NET_WIFI_SECURITY_WPA_WPA2_ENTERPRISE": {
                                "type": "integer",
                                "example": 12
                            },
	                   "NET_WIFI_SECURITY_WPA3_PSK_AES": {
                                "type": "integer",
                                "example": 13
                            },
                            "NET_WIFI_SECURITY_WPA3_SAE": {
                                "type": "integer",
                                "example": 14
                            }
                        },
                        "required": []
                    },
                    "success":{
                        "$ref": "#/common/success"
                    }
                },
                "required": [
                    "security_modes",
                    "success"
                ]
            }
        }
    },
    "events": {
        "onInterfaceStateChanged":{
            "summary": "Triggered when an interface becomes enabled or disabled.",
            "params": {
                "type": "object",
                "properties": {
                    "interface":{
                        "$ref": "#/definitions/interface" 
                    },
                    "state":{
                        "summary": "Whether the interface is enabled (`true`) or disabled (`false`)",
                        "type": "string",
                        "example": "Interface_ADDED"
                    }
                },
                "required": [
                    "interface",
                    "state"
                ]
            }
        },
        "onIPAddressChanged":{
            "summary": "Triggered when an IP Address is assigned or lost.",
            "params": {
                "type": "object",
                "properties": {
                    "interface":{
                        "$ref": "#/definitions/interface" 
                    },
                    "ipv6":{
                        "summary": "The IPv6 address for the interface",
                        "type": "string",
                        "example": "2001:0xx8:85a3:0000:0000:8x2x:0370:7334" 
                    },
                    "ipv4":{
                        "summary": "The IPv4 address for the interface",
                        "type": "string",
                        "example": "192.168.1.2" 
                    },
                    "status":{
                        "summary": "Whether IP address was acquired or lost",
                        "type": "string",
                        "enum": ["`ACQUIRED`", "`LOST`" ],
                        "example": "ACQUIRED"
                    }
                },
                "required": [
                    "interface",
                    "ipv6",
                    "ip4",
                    "status"
                ]
            }
        },
        "onActiveInterfaceChanged":{
            "summary": "Triggered when the ac interface changes, regardless if it's from a system operation or through the `setDefaultInterface` method.",
            "params": {
                "type": "object",
                "properties": {
                    "oldInterfaceName":{
                        "summary": "The previous interface that was changed",
                        "type": "string",
                        "example": "ETHERNET" 
                    },
                    "newInterfaceName":{
                        "summary": "The current interface",
                        "type": "string",
                        "example": "WIFI" 
                    }
                },
                "required": [
                    "oldInterfaceName",
                    "newInterfaceName"
                ]
            }
        },
        "onInternetStatusChange":{
            "summary": "Triggered when internet connection state changed.The possible internet connection status are `NO_INTERNET`, `LIMITED_INTERNET`, `CAPTIVE_PORTAL`, `FULLY_CONNECTED`",
            "params": {
                "type": "object",
                "properties": {
                    "PrevState":{
                        "summary": "The privious internet connection state",
                        "type": "integer",
                        "example": 0
                    },
                    "PrevStatus":{
                        "summary": "The previous internet connection status",
                        "type": "string",
                        "example": "NO_INTERNET"
                    },
                    "state":{
                        "summary": "The internet connection state",
                        "type": "integer",
                        "example": 0
                    },
                    "status":{
                        "summary": "The internet connection status",
                        "type": "string",
                        "example": "NO_INTERNET"
                    }
                },
                "required": [
                    "PrevState",
                    "PrevStatus",
                    "state",
                    "status"
                ]
            }
        },
        "onPingResponse":{
            "summary": "Triggered when a connection is made or lost.",
            "params": {
                "type": "object",
                "properties": {
                    "pingStatistics":{
                        "summary": "Ping Statistics",
                        "type": "string",
                        "example": ""	
                    },
                    "guid":{
                        "$ref": "#/definitions/guid"
                    }
                },
                "required": [
                    "pingStatistics",
                    "guid"
                ]
            }
        },
        "onTraceResponse":{
            "summary": "Triggered when a connection is made or lost.",
            "params": {
                "type": "object",
                "properties": {
                    "traceResult":{
                        "summary": "Trace Result",
                        "type": "string",
                        "example": ""	
                    },
                    "guid":{
                        "$ref": "#/definitions/guid"
                    }
                },
                "required": [
                    "traceResult",
                    "guid"
                ]
            }
        },
        "onAvailableSSIDs":{
            "summary": "Triggered when got for scan.",
            "params": {
                "type": "object",
                "properties": {
                    "ssids":{
                        "summary": "On Available SSID's",
                        "type": "string",
                        "example": ""	
                    }
                },
                "required": [
                    "ssids"
                ]
            }
        },
        "onWiFiStateChanged":{
            "summary": "Triggered when WIFI connection state get changed.",
            "params": {
                "type": "object",
                "properties": {
                    "state":{
                        "summary": "onWiFiStateChanged",
                        "type": "integer",
                        "example": "3"	
                    }
                },
                "required": [
                    "state"
                ]
            }
        },
        "onWiFiSignalStrengthChanged":{
            "summary": "Triggered when WIFI connection Signal Strength get changed.",
            "params": {
                "type": "object",
                "properties": {
                    "ssid":{
                        "summary": "Signal Strength changed SSID",
                        "type": "string",
                        "example": "comcast123"	
                    },
                    "signalStrength":{
                        "summary": "Signal Strength",
                        "type": "string",
                        "example": ""	
                    },
                    "quality":{
                        "summary": "Signal quality",
                        "type": "string",
                        "example": ""	
                    }
                },
                "required": [
                    "ssid",
                    "signalStrength",
                    "quality"
                ]
            }
        }
    }
}
